# Generated by Django 5.2.7 on 2025-10-18 09:33

import crud.models
import crud.utils.validators
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Name is empty.', 'max_length': 'Name cannot exceed 75 characters.', 'null': 'Name is required.'}, max_length=75, verbose_name='Name')),
                ('email', models.EmailField(error_messages={'blank': 'E-mail is empty.', 'invalid': 'Invalid e-mail', 'max_length': 'E-mail cannot exceed 50 characters.', 'null': 'E-mail is required.'}, max_length=50, validators=[crud.utils.validators.validate_email, django.core.validators.EmailValidator(message='Invalid e-mail.')], verbose_name='E-mail')),
                ('salary', models.DecimalField(decimal_places=2, default=Decimal('0.00'), error_messages={'blank': 'Salary is empty.', 'invalid': 'Invalid salary.', 'null': 'Salary is required.'}, max_digits=12, validators=[crud.utils.validators.validate_salary, django.core.validators.MinValueValidator(Decimal('0'), message='Salary must be greater than or equal to 0.00.'), django.core.validators.MaxValueValidator(Decimal('999999999.9900000095367431640625'), message='Salary cannot exceed 999,999,999.99.')], verbose_name='Salary')),
                ('birthday', models.DateField(default=crud.models.Customer.default_birthday, error_messages={'blank': 'Birthday cannot be empty.', 'invalid': 'Enter a valid date (YYYY-MM-DD).', 'null': 'Birthday is required.'}, validators=[crud.utils.validators.validate_birthday], verbose_name='Birthday')),
                ('gender', models.CharField(choices=[('M', 'MALE'), ('F', 'FEMALE'), ('O', 'OTHER')], default='M', error_messages={'blank': 'Gender is empty.', 'invalid_choice': 'Invalid gender.', 'null': 'Gender is required.'}, max_length=1, validators=[crud.utils.validators.validate_gender], verbose_name='Gender')),
                ('picture', models.ImageField(default='customer.png', error_messages={'blank': 'Picture is empty.', 'invalid': 'Invalid picture file.', 'null': 'Picture is null.'}, upload_to='media', verbose_name='Picture')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customer',
                'managed': True,
                'constraints': [models.UniqueConstraint(fields=('email',), name='unq_customer_email', violation_error_message='E-mail already registered.'), models.CheckConstraint(condition=models.Q(('salary__gte', 0.0), ('salary__lte', 999999999.99)), name='chk_customer_salary', violation_error_message='Invalid salary.'), models.CheckConstraint(condition=models.Q(('gender__in', ['M', 'F', 'O'])), name='chk_customer_gender', violation_error_message='Invalid gender.')],
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(default='', error_messages={'blank': 'Model is empty.', 'max_length': 'Model name cannot exceed 45 characters.', 'null': 'Model is required.'}, max_length=45, verbose_name='Model')),
                ('plate', models.CharField(error_messages={'blank': 'Plate is empty.', 'max_length': 'Platee must have a maximum of 7 characters.', 'null': 'Plate is required.'}, max_length=9, validators=[crud.utils.validators.validate_plate, django.core.validators.RegexValidator(code='invalid_plate', message='Enter a valid plate (e.g., ABC-1234 or ABC1D23).', regex='^[A-Z]{3}\\d[A-Z]\\d{2}$|^[A-Z]{3}-\\d{4}$')], verbose_name='License Plate')),
                ('year', models.PositiveIntegerField(error_messages={'blank': 'Year is empty.', 'invalid': 'Invalid year.', 'null': 'Year is required'}, validators=[crud.utils.validators.validate_year, django.core.validators.MinValueValidator(1885, message='Year must be greater than 1885 (first automobile).'), crud.utils.validators.max_year_validator], verbose_name='Year')),
                ('market_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), error_messages={'blank': 'Market value is empty.', 'invalid': 'Invalid market value.', 'null': 'Market value is required.'}, max_digits=12, validators=[crud.utils.validators.validate_market_value, django.core.validators.MinValueValidator(Decimal('0'), message='Market value must be greater than or equal to 0.00.'), django.core.validators.MaxValueValidator(Decimal('999999999.9900000095367431640625'), message='Market value cannot exceed 999,999,999.99.')], verbose_name='Market Value')),
                ('picture', models.ImageField(default='car.png', error_messages={'blank': 'Picture is empty.', 'invalid_image': 'Invalid picture file.', 'null': 'Picture is required.'}, upload_to='media', verbose_name='Picture')),
                ('description', models.CharField(blank=True, default='', error_messages={'max_length': 'Description cannot exceed 200 characters.'}, max_length=200, null=True, verbose_name='Description')),
                ('customer', models.ForeignKey(error_messages={'blank': 'Please select a valid customer.', 'null': 'Customer is required.'}, on_delete=django.db.models.deletion.CASCADE, to='crud.customer', verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Car',
                'verbose_name_plural': 'Cars',
                'db_table': 'car',
                'managed': True,
                'constraints': [models.UniqueConstraint(fields=('plate',), name='unq_car_plate', violation_error_message='Plate already registered.'), models.CheckConstraint(condition=models.Q(('market_value__gte', Decimal('0')), ('market_value__lte', Decimal('999999999.9900000095367431640625'))), name='check_car_market_value', violation_error_message='Invalid salary.')],
            },
        ),
    ]
